// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAppMedicalAssistant_DataBase;

#nullable disable

namespace WebAppMedicalAssistant_DataBase.Migrations
{
    [DbContext(typeof(MedicalAssistantContext))]
    partial class MedicalAssistantContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("WebAppMedicalAssistant_DataBase.Entities.Analysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateOfAnalysis")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MedicalInstitutionId")
                        .HasColumnType("int");

                    b.Property<string>("NameOfAnalysis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ScanOfAnalysisDocument")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicalInstitutionId");

                    b.HasIndex("UserId");

                    b.ToTable("Analyses");
                });

            modelBuilder.Entity("WebAppMedicalAssistant_DataBase.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DescriptionOfDestination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DoctorVisitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorVisitId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("WebAppMedicalAssistant_DataBase.Entities.Disease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("NameOfDisease")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShotDescriptionDisease")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransferredDiseaseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransferredDiseaseId");

                    b.ToTable("Diseases");
                });

            modelBuilder.Entity("WebAppMedicalAssistant_DataBase.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DoctorVisitId")
                        .HasColumnType("int");

                    b.Property<string>("FirstNameDoctor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastNameDoctor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatronymicDoctor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("Specializacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorVisitId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("WebAppMedicalAssistant_DataBase.Entities.DoctorVisit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateVisit")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PriceVisit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DoctorVisits");
                });

            modelBuilder.Entity("WebAppMedicalAssistant_DataBase.Entities.Fluorography", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DataOfExamination")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDateOfSurvey")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MedicalInstitutionId")
                        .HasColumnType("int");

                    b.Property<string>("NumberFluorography")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Result")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicalInstitutionId");

                    b.HasIndex("UserId");

                    b.ToTable("Fluorographies");
                });

            modelBuilder.Entity("WebAppMedicalAssistant_DataBase.Entities.MedicalExamination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfMedicalExamination")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameOfMedicalExamination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PriceOfMedicalExamination")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("ScanOfMedicalExamination")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("UserId");

                    b.ToTable("MedicalExaminations");
                });

            modelBuilder.Entity("WebAppMedicalAssistant_DataBase.Entities.MedicalInstitution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DoctorVisitId")
                        .HasColumnType("int");

                    b.Property<string>("NameMedicalInstitution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperatingMode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VaccinationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorVisitId");

                    b.HasIndex("VaccinationId");

                    b.ToTable("MedicalInstitutions");
                });

            modelBuilder.Entity("WebAppMedicalAssistant_DataBase.Entities.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("NameOfMedicine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrescribedMedicationId")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescriptionOfMedicine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PrescribedMedicationId");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("WebAppMedicalAssistant_DataBase.Entities.PhysicalTherapy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndPhysicalTherapy")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameOfPhysicalTherapy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartPhysicalTherapy")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TransferredDiseaseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("TransferredDiseaseId");

                    b.ToTable("PhysicalTherapy");
                });

            modelBuilder.Entity("WebAppMedicalAssistant_DataBase.Entities.PrescribedMedication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDateOfMedication")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedicineDose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MedicinePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDateOfMedication")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TransferredDiseaseId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("TransferredDiseaseId");

                    b.HasIndex("UserId");

                    b.ToTable("PrescribedMedications");
                });

            modelBuilder.Entity("WebAppMedicalAssistant_DataBase.Entities.TransferredDisease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateOfDisease")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfRecovery")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DoctorVisitId")
                        .HasColumnType("int");

                    b.Property<int>("FormOfTransferredDisease")
                        .HasColumnType("int");

                    b.Property<bool>("TypeOfTreatment")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorVisitId");

                    b.HasIndex("UserId");

                    b.ToTable("TransferredDiseases");
                });

            modelBuilder.Entity("WebAppMedicalAssistant_DataBase.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebAppMedicalAssistant_DataBase.Entities.Vaccination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApplicationOfVaccine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfVaccination")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameOfVaccine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VaccinationExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VacineDose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VacineSeria")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Vaccinations");
                });

            modelBuilder.Entity("WebAppMedicalAssistant_DataBase.Entities.Analysis", b =>
                {
                    b.HasOne("WebAppMedicalAssistant_DataBase.Entities.MedicalInstitution", "MedicalInstitution")
                        .WithMany("Analyses")
                        .HasForeignKey("MedicalInstitutionId");

                    b.HasOne("WebAppMedicalAssistant_DataBase.Entities.User", "User")
                        .WithMany("Analyzes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalInstitution");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAppMedicalAssistant_DataBase.Entities.Appointment", b =>
                {
                    b.HasOne("WebAppMedicalAssistant_DataBase.Entities.DoctorVisit", "DoctorVisit")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorVisitId");

                    b.Navigation("DoctorVisit");
                });

            modelBuilder.Entity("WebAppMedicalAssistant_DataBase.Entities.Disease", b =>
                {
                    b.HasOne("WebAppMedicalAssistant_DataBase.Entities.TransferredDisease", "TransferredDisease")
                        .WithMany("Diseases")
                        .HasForeignKey("TransferredDiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransferredDisease");
                });

            modelBuilder.Entity("WebAppMedicalAssistant_DataBase.Entities.Doctor", b =>
                {
                    b.HasOne("WebAppMedicalAssistant_DataBase.Entities.DoctorVisit", "DoctorVisit")
                        .WithMany("Doctors")
                        .HasForeignKey("DoctorVisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DoctorVisit");
                });

            modelBuilder.Entity("WebAppMedicalAssistant_DataBase.Entities.DoctorVisit", b =>
                {
                    b.HasOne("WebAppMedicalAssistant_DataBase.Entities.User", "User")
                        .WithMany("DoctorVisits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAppMedicalAssistant_DataBase.Entities.Fluorography", b =>
                {
                    b.HasOne("WebAppMedicalAssistant_DataBase.Entities.MedicalInstitution", "MedicalInstitution")
                        .WithMany("Fluorographys")
                        .HasForeignKey("MedicalInstitutionId");

                    b.HasOne("WebAppMedicalAssistant_DataBase.Entities.User", "User")
                        .WithMany("Fluorographies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalInstitution");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAppMedicalAssistant_DataBase.Entities.MedicalExamination", b =>
                {
                    b.HasOne("WebAppMedicalAssistant_DataBase.Entities.Appointment", "Appointment")
                        .WithMany("MedicalExaminations")
                        .HasForeignKey("AppointmentId");

                    b.HasOne("WebAppMedicalAssistant_DataBase.Entities.User", "User")
                        .WithMany("MedicalExaminations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAppMedicalAssistant_DataBase.Entities.MedicalInstitution", b =>
                {
                    b.HasOne("WebAppMedicalAssistant_DataBase.Entities.DoctorVisit", "DoctorVisit")
                        .WithMany("MedicalInstitutions")
                        .HasForeignKey("DoctorVisitId");

                    b.HasOne("WebAppMedicalAssistant_DataBase.Entities.Vaccination", "Vaccination")
                        .WithMany("MedicalInstitutions")
                        .HasForeignKey("VaccinationId");

                    b.Navigation("DoctorVisit");

                    b.Navigation("Vaccination");
                });

            modelBuilder.Entity("WebAppMedicalAssistant_DataBase.Entities.Medicine", b =>
                {
                    b.HasOne("WebAppMedicalAssistant_DataBase.Entities.PrescribedMedication", "PrescribedMedication")
                        .WithMany("Medicines")
                        .HasForeignKey("PrescribedMedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrescribedMedication");
                });

            modelBuilder.Entity("WebAppMedicalAssistant_DataBase.Entities.PhysicalTherapy", b =>
                {
                    b.HasOne("WebAppMedicalAssistant_DataBase.Entities.Appointment", "Appointment")
                        .WithMany("PhysicalTherapys")
                        .HasForeignKey("AppointmentId");

                    b.HasOne("WebAppMedicalAssistant_DataBase.Entities.TransferredDisease", "TransferredDisease")
                        .WithMany("PhysicalTherapies")
                        .HasForeignKey("TransferredDiseaseId");

                    b.Navigation("Appointment");

                    b.Navigation("TransferredDisease");
                });

            modelBuilder.Entity("WebAppMedicalAssistant_DataBase.Entities.PrescribedMedication", b =>
                {
                    b.HasOne("WebAppMedicalAssistant_DataBase.Entities.Appointment", "Appointment")
                        .WithMany("PrescribedMedications")
                        .HasForeignKey("AppointmentId");

                    b.HasOne("WebAppMedicalAssistant_DataBase.Entities.TransferredDisease", "TransferredDisease")
                        .WithMany("PrescribedMedications")
                        .HasForeignKey("TransferredDiseaseId");

                    b.HasOne("WebAppMedicalAssistant_DataBase.Entities.User", "User")
                        .WithMany("PrescribedMedication")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("TransferredDisease");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAppMedicalAssistant_DataBase.Entities.TransferredDisease", b =>
                {
                    b.HasOne("WebAppMedicalAssistant_DataBase.Entities.DoctorVisit", "DoctorVisit")
                        .WithMany("TransferredDiseases")
                        .HasForeignKey("DoctorVisitId");

                    b.HasOne("WebAppMedicalAssistant_DataBase.Entities.User", "User")
                        .WithMany("TransferredDiseases")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DoctorVisit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAppMedicalAssistant_DataBase.Entities.Vaccination", b =>
                {
                    b.HasOne("WebAppMedicalAssistant_DataBase.Entities.User", "User")
                        .WithMany("Vaccinations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAppMedicalAssistant_DataBase.Entities.Appointment", b =>
                {
                    b.Navigation("MedicalExaminations");

                    b.Navigation("PhysicalTherapys");

                    b.Navigation("PrescribedMedications");
                });

            modelBuilder.Entity("WebAppMedicalAssistant_DataBase.Entities.DoctorVisit", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Doctors");

                    b.Navigation("MedicalInstitutions");

                    b.Navigation("TransferredDiseases");
                });

            modelBuilder.Entity("WebAppMedicalAssistant_DataBase.Entities.MedicalInstitution", b =>
                {
                    b.Navigation("Analyses");

                    b.Navigation("Fluorographys");
                });

            modelBuilder.Entity("WebAppMedicalAssistant_DataBase.Entities.PrescribedMedication", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("WebAppMedicalAssistant_DataBase.Entities.TransferredDisease", b =>
                {
                    b.Navigation("Diseases");

                    b.Navigation("PhysicalTherapies");

                    b.Navigation("PrescribedMedications");
                });

            modelBuilder.Entity("WebAppMedicalAssistant_DataBase.Entities.User", b =>
                {
                    b.Navigation("Analyzes");

                    b.Navigation("DoctorVisits");

                    b.Navigation("Fluorographies");

                    b.Navigation("MedicalExaminations");

                    b.Navigation("PrescribedMedication");

                    b.Navigation("TransferredDiseases");

                    b.Navigation("Vaccinations");
                });

            modelBuilder.Entity("WebAppMedicalAssistant_DataBase.Entities.Vaccination", b =>
                {
                    b.Navigation("MedicalInstitutions");
                });
#pragma warning restore 612, 618
        }
    }
}
